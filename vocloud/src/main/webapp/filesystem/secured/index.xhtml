<?xml version="1.0" encoding="windows-1250"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:p="http://primefaces.org/ui"
      xmlns:f="http://xmlns.jcp.org/jsf/core">

    <ui:composition template="/WEB-INF/template.xhtml">
        <ui:define name="title">
            <h:outputText value="#{bundle.ManageFilesystemTitle}" />
        </ui:define>

        <ui:define name="content">
            <h:outputScript library="script" name="samp.js" />
            <script type="text/javascript">
                //<![CDATA[
                // URL of table to send.
                var serviceUrl = window.location.href.toString().replace(new RegExp("filesystem/.*$"), "files/");
                var baseUrl;
                var fits;
                var btnEnabled = false;
                // Broadcasts a table given a hub connection.
                var send = function (connection) {
                    for (var i = 0; i < fits.length; i++) {
                        var link = baseUrl + fits[i];
                        var msg = new samp.Message("spectrum.load.ssa-generic", {"url": link});
                        connection.notifyAll([msg]);
                    }
                };

                // Adjusts page content depending on whether the hub exists or not.
                var configureSampEnabled = function (isHubRunning) {
                    if (!btnEnabled && isHubRunning) {
                        btnEnabled = true;
                        enableSAMP();
                    } else if (btnEnabled && !isHubRunning) {
                        btnEnabled = false;
                        disableSAMP();
                    }
                };

                // Arrange for document to be adjusted for presence of hub every 2 sec.
                var connector = new samp.Connector("Sender");
                onload = function () {
                    connector.onHubAvailability(configureSampEnabled, 2000);
                };
                onunload = function () {
                    connector.unregister();
                };
                //]]>
            </script>
            <h:form id="form">
                <p:remoteCommand name="enableSAMP" update="menubar" actionListener="#{filesystemManageBean.enableSamp(true)}" />
                <p:remoteCommand name="disableSAMP" update="menubar" actionListener="#{filesystemManageBean.enableSamp(false)}" />
                <h:panelGroup id="messagePanel" layout="block">
                    <p:messages id="messages" showIcon="true" showDetail="true" showSummary="false"/>
                </h:panelGroup>
                <p:menubar id="menubar">
                    <p:menuitem id="newFolderBtn" value="#{bundle.NewFolderMenuItem}" icon="ui-icon-folder-open" oncomplete="PF('renameOverlay').loadContents()"/>
                    <p:menuitem id="deleteSelectedBtn" value="Delete selected" icon="ui-icon-trash" oncomplete="PF('deleteDialog').show()"/>
                    <p:menuitem id="sendToSAMPbtn" disabled="#{not filesystemManageBean.sampBtnEnabled}" value="Send through SAMP" 
                                icon="ui-icon-circle-arrow-n" action="#{filesystemManageBean.sendSelectedThroughSAMP}" update="messages"/>
                    <p:menuitem id="uploadFilesBtn" value="#{bundle.FileUploadMenuItem}" icon="ui-icon-arrowthick-1-n" action="upload-file">
                        <f:setPropertyActionListener target="#{requestScope['targetFolder']}" value="#{filesystemManageBean.prefix}" />
                    </p:menuitem>
                    <p:menuitem id="remoteDownloadBtn" action="remote-download" value="#{bundle.RemoteDownloadMenuItem}" icon="ui-icon-arrowthick-1-s">
                        <f:setPropertyActionListener target="#{requestScope['targetFolder']}" value="#{filesystemManageBean.prefix}" />
                    </p:menuitem>
                    <p:menuitem id="SSAPDownloadBtn" action="ssap" value="#{bundle.SSAPDownloadMenuItem}" icon="ui-icon-arrowthick-1-s">
                        <f:setPropertyActionListener target="#{requestScope['targetFolder']}" value="#{filesystemManageBean.prefix}" />
                    </p:menuitem>
                    <p:menuitem id="showDownloadQueueBtn" action="download-queue" value="#{bundle.ShowDownloadQueueMenuItem}" icon="ui-icon-clipboard" />
                </p:menubar>
                <p:overlayPanel id="newFolderPanel" for="newFolderBtn" hideEffect="fade" widgetVar="renameOverlay">
                    <h:panelGrid columns="2" cellpadding="10" cellspacing="5">
                        <p:inputText maxlength="100" value="#{filesystemManageBean.folderName}"/>
                        <p:commandButton value="#{bundle.CreateFolderButton}" action="#{filesystemManageBean.createFolder()}" update="@form" />
                    </h:panelGrid>
                </p:overlayPanel>
                <p:breadCrumb model="#{filesystemManageBean.breadcrumbModel}"/>
                <p:dataTable id="dataTable" resizableColumns="true" var="item" value="#{filesystemManageBean.filesystemItemList}" selection="#{filesystemManageBean.selectedItems}" rowKey="#{item.name}">
                    <p:column selectionMode="multiple" style="width:16px;text-align:center"/>
                    <p:column width="12">
                        <f:facet name="header">                            
                            <h:commandLink rendered="#{not filesystemManageBean.inRoot}" action="#{filesystemManageBean.goBack()}" styleClass="ui-icon ui-icon-arrowreturnthick-1-w" style="position:relative; left: -5px"/>
                            <h:commandLink rendered="#{filesystemManageBean.inRoot}" styleClass="ui-icon ui-icon-home" style="position:relative; left: -5px"/>
                        </f:facet>
                        <h:panelGroup styleClass="ui-icon ui-icon-folder-collapsed" rendered="#{item.folder}" />
                        <h:panelGroup styleClass="ui-icon ui-icon-document" rendered="#{not item.folder}" />
                    </p:column>

                    <p:column headerText="#{bundle.FileName}" sortBy="${item}" sortFunction="#{filesystemManageBean.sortByName}">
                        <h:outputText rendered="#{not item.folder}" value="#{item.name}" />
                        <h:commandLink action="#{filesystemManageBean.goToFolder(item)}" value="#{item.name}" rendered="#{item.folder}" />
                    </p:column>

                    <p:column headerText="#{bundle.FileLength}" sortBy="#{item.sizeInBytes}">
                        <h:outputText value="#{filesystemManageBean.humanReadableSize(item)}" />
                    </p:column>

                    <p:column headerText="#{bundle.FileLastModified}" sortBy="#{item.lastModified}">
                        <h:outputText value="#{item.lastModified}">
                            <f:convertDateTime type="both"  timeZone="CET" />
                        </h:outputText>
                    </p:column>

                    <p:column headerText="#{bundle.FileOperation}" width="300">
                        <p:commandButton disabled="#{item.folder}" value="#{bundle.FileDownload}" ajax="false" icon="ui-icon-arrowthick-1-s">
                            <p:fileDownload value="#{filesystemManageBean.downloadFile(item)}" />
                        </p:commandButton>
                        <p:commandButton update=":dialogForm:fileRenamePanel" value="#{bundle.FileRename}" icon="ui-icon-pencil" oncomplete="PF('renameDialog').show()">
                            <f:setPropertyActionListener target="#{filesystemManageBean.itemToRename}" value="#{item.name}" />
                            <f:setPropertyActionListener target="#{filesystemManageBean.filesystemItemToRename}" value="#{item}" />
                        </p:commandButton>
                        <p:commandButton rendered="#{not item.folder}" title="View file"  icon="ui-icon-circle-zoomin" immediate="true" process="@this"
                                         update=":dialogViewForm:fileView" oncomplete="PF('fileView').show()" value="View">
                            <f:setPropertyActionListener value="#{item}" target="#{filesystemManageBean.selectedViewedFile}" />  
                        </p:commandButton>
                    </p:column>

                </p:dataTable>


                <p:confirmDialog showEffect="fade" hideEffect="fade" widgetVar="deleteDialog" header="Delete items" message="Do you really want to delete selected items?" severity="alert">
                    <p:commandButton id="confirm" value="#{bundle.YesChoice}" icon="ui-icon-check" oncomplete="PF('deleteDialog').hide()" actionListener="#{filesystemManageBean.deleteSelected()}"
                                     update="@form"/>
                    <p:commandButton id="decline" value="#{bundle.NoChoice}" icon="ui-icon-close" onclick="PF('deleteDialog').hide()"/>
                </p:confirmDialog>
            </h:form>
            <h:form id="dialogForm">
                <p:dialog header="#{bundle.RenameDialog}" widgetVar="renameDialog" modal="true" resizable="false">
                    <p:outputPanel id="fileRenamePanel" style="text-align:center;">
                        <h:panelGrid columns="2" cellpadding="10" cellspacing="5" rendered="#{filesystemManageBean.itemToRename != null}">
                            <p:inputText maxlength="150" value="#{filesystemManageBean.itemToRename}"/>
                            <p:commandButton id="renameBtn" value="#{bundle.FileRenameButton}" action="#{filesystemManageBean.renameFilesystemItem()}" update=":form,@form"/>
                            <p:defaultCommand target="renameBtn" />
                        </h:panelGrid>
                    </p:outputPanel>
                </p:dialog>
            </h:form>
            <h:form id="dialogViewForm">
                <p:dialog id="fileView" dynamic="true" widgetVar="fileView" width="700" maximizable="false" height="500">
                    <f:facet name="header">File <h:outputText id="name" value="#{filesystemManageBean.selectedViewedFile.name}" /></f:facet>
                    <pre><h:outputText id="text" value="#{filesystemManageBean.selectedViewedFileContents}" /></pre>
                </p:dialog>
            </h:form>
        </ui:define>
    </ui:composition>

</html>
