<?xml version="1.0" encoding="windows-1250"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:p="http://primefaces.org/ui"
      xmlns:f="http://xmlns.jcp.org/jsf/core">

    <ui:composition template="/WEB-INF/template.xhtml">
        <ui:define name="title">
            <h:outputText value="#{bundle.ViewFilesystemTitle}" />
        </ui:define>

        <ui:define name="content">
            <h:outputScript library="script" name="samp.js" />
            <script type="text/javascript">
                //<![CDATA[
                // URL of table to send.
                var serviceUrl = window.location.href.toString().replace(new RegExp("filesystem/.*$"), "files/");
                var baseUrl;
                var fits;
                var btnEnabled = false;
                // Broadcasts a table given a hub connection.
                var send = function (connection) {
                    for (var i = 0; i < fits.length; i++) {
                        var link = baseUrl + fits[i];
                        var msg = new samp.Message("spectrum.load.ssa-generic", {"url": link});
                        connection.notifyAll([msg]);
                    }
                };

                // Adjusts page content depending on whether the hub exists or not.
                var configureSampEnabled = function (isHubRunning) {
                    if (!btnEnabled && isHubRunning) {
                        btnEnabled = true;
                        enableSAMP();
                    } else if (btnEnabled && !isHubRunning) {
                        btnEnabled = false;
                        disableSAMP();
                    }
                };

                // Arrange for document to be adjusted for presence of hub every 2 sec.
                var connector = new samp.Connector("Sender");
                onload = function () {
                    connector.onHubAvailability(configureSampEnabled, 2000);
                };
                onunload = function () {
                    connector.unregister();
                };
                //]]>
            </script>
            <h:form id="form">
                <p:remoteCommand name="enableSAMP" update="menubar" actionListener="#{filesystemViewBean.enableSamp(true)}" />
                <p:remoteCommand name="disableSAMP" update="menubar" actionListener="#{filesystemViewBean.enableSamp(false)}" />
                <h:panelGroup id="messagePanel" layout="block">
                    <p:messages id="messages" showIcon="true" showDetail="true" showSummary="false"/>
                </h:panelGroup>
                <p:menubar id="menubar">
                    <p:menuitem id="sendToSAMPbtn" disabled="#{not filesystemViewBean.sampBtnEnabled}" value="Send through SAMP" icon="ui-icon-circle-arrow-n" action="#{filesystemViewBean.sendSelectedThroughSAMP}" update="messages"/>
                </p:menubar>
                <p:breadCrumb model="#{filesystemViewBean.breadcrumbModel}"/>
                <p:dataTable resizableColumns="true" var="item" value="#{filesystemViewBean.filesystemItemList}" selection="#{filesystemViewBean.selectedItems}" rowKey="#{item.name}"
                             rows="200"
                             paginator="true" paginatorAlwaysVisible="false"
                             paginatorTemplate="{CurrentPageReport} {FirstPageLink} {PreviousPageLink} {PageLinks} {NextPageLink} {LastPageLink}">
                    <f:facet name="header">
                        Total <h:outputText value="#{filesystemViewBean.filesCount}" /> file<h:outputText rendered="#{filesystemViewBean.filesCount != 1}" value="s" />
                        and <h:outputText value="#{filesystemViewBean.foldersCount}" /> folder<h:outputText rendered="#{filesystemViewBean.foldersCount != 1}" value="s" />
                    </f:facet>
                    <p:column disabledSelection="#{item.folder}" selectionMode="multiple" style="width:16px;text-align:center"/>
                    <p:column width="12">
                        <f:facet name="header">                            
                            <h:commandLink rendered="#{not filesystemViewBean.inRoot}" action="#{filesystemViewBean.goBack()}" styleClass="ui-icon ui-icon-arrowreturnthick-1-w" style="position:relative; left: -5px"/>
                            <h:commandLink rendered="#{filesystemViewBean.inRoot}" styleClass="ui-icon ui-icon-home" style="position:relative; left: -5px"/>
                        </f:facet>
                        <h:panelGroup styleClass="ui-icon ui-icon-folder-collapsed" rendered="#{item.folder}" />
                        <h:panelGroup styleClass="ui-icon ui-icon-document" rendered="#{not item.folder}" />
                    </p:column>

                    <p:column headerText="#{bundle.FileName}" sortBy="${item}" sortFunction="#{filesystemViewBean.sortByName}">
                        <h:outputText rendered="#{not item.folder}" value="#{item.name}" />
                        <h:commandLink action="#{filesystemViewBean.goToFolder(item)}" value="#{item.name}" rendered="#{item.folder}" />
                    </p:column>

                    <p:column headerText="#{bundle.FileLength}" sortBy="#{item.sizeInBytes}">
                        <h:outputText value="#{filesystemViewBean.humanReadableSize(item)}" />
                    </p:column>

                    <p:column headerText="#{bundle.FileLastModified}" sortBy="#{item.lastModified}">
                        <h:outputText value="#{item.lastModified}">
                            <f:convertDateTime type="both"  timeZone="CET" />
                        </h:outputText>
                    </p:column>

                    <p:column headerText="#{bundle.FileOperation}">
                        <p:commandButton rendered="#{not item.folder}" value="#{bundle.FileDownload}" ajax="false" icon="ui-icon-arrowthick-1-s">
                            <p:fileDownload value="#{filesystemViewBean.downloadFile(item)}" />
                        </p:commandButton>
                        <p:commandButton rendered="#{not item.folder}" title="View file"  icon="ui-icon-circle-zoomin" immediate="true" process="@this"
                                         update=":dialogForm:fileView" oncomplete="PF('fileView').show()" value="View">
                            <f:setPropertyActionListener value="#{item}" target="#{filesystemViewBean.selectedViewedFile}" />  
                        </p:commandButton>
                    </p:column>

                </p:dataTable>
            </h:form>
            <h:form id="dialogForm">
                <p:dialog id="fileView" dynamic="true" widgetVar="fileView" width="700" maximizable="false" height="500">
                    <f:facet name="header">File <h:outputText id="name" value="#{filesystemViewBean.selectedViewedFile.name}" /></f:facet>
                    <pre><h:outputText id="text" value="#{filesystemViewBean.selectedViewedFileContents}" /></pre>
                </p:dialog>
            </h:form>
        </ui:define>
    </ui:composition>

</html>
